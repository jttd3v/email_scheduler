from flask import Flask, request, jsonify, render_template
import imaplib
import email
import os
import threading
import time
import smtplib
from email.mime.text import MIMEText
from dotenv import load_dotenv
from datetime import datetime

app = Flask(__name__)
load_dotenv()

EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("PASSWORD")
IMAP_SERVER = "outlook.office365.com"
SMTP_SERVER = "smtp.office365.com"
SMTP_PORT = 587

responses = []  # Real-time store

# Monitor email inbox every 60 seconds
def monitor_inbox():
    while True:
        try:
            mail = imaplib.IMAP4_SSL(IMAP_SERVER)
            mail.login(EMAIL, PASSWORD)
            mail.select('inbox')

            result, data = mail.search(None, 'UNSEEN')
            mail_ids = data[0].split()

            for num in mail_ids:
                result, msg_data = mail.fetch(num, '(RFC822)')
                raw_email = msg_data[0][1]
                msg = email.message_from_bytes(raw_email)

                sender = msg["From"]
                subject = msg["Subject"]
                date_received = msg["Date"]
                has_attachment = any(part.get_filename() for part in msg.walk())
                body = ""

                if msg.is_multipart():
                    for part in msg.walk():
                        if part.get_content_type() == "text/plain":
                            body = part.get_payload(decode=True).decode("utf-8", errors="ignore")
                            break
                else:
                    body = msg.get_payload(decode=True).decode("utf-8", errors="ignore")

                summary = body.strip().split("\n")[0][:80] if body else "No content"

                responses.append({
                    "sender": sender,
                    "subject": subject,
                    "date": date_received,
                    "attachment": has_attachment,
                    "summary": summary,
                    "acknowledged": False
                })

            mail.logout()
        except Exception as e:
            print("Error:", e)

        time.sleep(60)

# Route for real-time monitoring
@app.route("/monitor")
def monitor():
    return jsonify(responses)

# Route to send acknowledgment email
@app.route("/acknowledge/<email>", methods=[POST])
def acknowledge(email):
    try:
        msg = MIMEText("We acknowledge your response. Thank you.")
        msg["Subject"] = "Acknowledgment"
        msg["From"] = EMAIL
        msg["To"] = email

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL, PASSWORD)
            server.send_message(msg)

        # Mark as acknowledged
        for r in responses:
            if email in r["sender"]:
                r["acknowledged"] = True

        return jsonify({"status": "sent"})

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

if __name__ == "__main__":
    threading.Thread(target=monitor_inbox, daemon=True).start()
    app.run(debug=True)
